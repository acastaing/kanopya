#!/usr/bin/perl -w
# kanopya-rulesengine.pl - This is the main script to run kanopya orchestration rules engine.

#    Copyright Â© 2013 Hedera Technology SAS
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Maintained by Dev Team of Hedera Technology <dev@hederatech.com>.
# Created 04 March 2013

=head1 NAME

kanopya-rulesengine - Rules Engine

=head1 SYNOPSIS

	$ ./kanopya-rulesengine

=head1 DESCRIPTION

rulesengine is the main script to run Kanopya rules engine.
Rules Engine evaluate rules and apply associated workflow.

=head1 METHODS

=cut

use strict;
use warnings;

use BaseDB;
use General;
use RulesEngine;
use Kanopya::Config;
use Log::Log4perl "get_logger";

my $dir = Kanopya::Config::getKanopyaDir();
Log::Log4perl->init($dir . '/conf/rulesengine-log.conf');
my $log = get_logger("");


my $running = 1;

sub signalHandler {
	my $sig = shift;
	$log->info($sig." received : stopping main loop");
	$running = 0;
}

$SIG{TERM} = \&signalHandler;

sub runRulesEngine {
    my %args = @_;

    my $rulesengine = RulesEngine->new(service_providers => $args{service_providers});

    # enter in the main loop and continue while $$running is true
    $rulesengine->run(\$running);
}

eval {
    # Firstly authenticate here, to get the list of service providers
    my $config = Kanopya::Config::get('rulesengine');

    # Authenticate the daemon to the api.
    BaseDB->authenticate(login    => $config->{user}->{name},
                         password => $config->{user}->{password});

    # Infinite loop.
    # - If multiprocess is not set, run the rules engine normally
    # - If multiprocess is set, spawn one process for each service provider
    if ($config->{multiprocess}) {
        # Keep the processing service providers
        my $processing = {};
        while (1) {
            my @serviceproviders = Entity::ServiceProvider->search(hash => {
                                       service_provider_type_id => { not => undef }
                                   });

            my $pid;
            for my $serviceprovider (@serviceproviders) {
                if (not defined $processing->{$serviceprovider->id}) {
                    $processing->{$serviceprovider->id} = $serviceprovider;

                    # Run an aggregator in a child
                    $log->info("Run a rules engine for service <" . $serviceprovider->id . "> in a child process...");
                    $pid = fork();
                    if ($pid == 0) {
                        runRulesEngine(service_providers => [ $serviceprovider->id ]);
                        last;
                    }
                }
            };
            if (not defined $pid or $pid != 0) {
                sleep 30;
            }
        }
    }
    else {
        runRulesEngine();
    }
};
if ($@) {
	my $ex = $@;
	$log->error("error in rulesengine instanciation: $ex");
	die "Catch error in rulesengine instanciation: $ex";
};

$log->info("kanopya-rulesengine end.");


__END__

=head1 AUTHOR

Copyright (c) 2010 by Hedera Technology Dev Team (dev@hederatech.com). All rights reserved.
This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=cut
