#!/usr/bin/perl -w
# kanopya-state-manager - This is the main script to run kanopya internal monitoring.

#    Copyright Â© 2011 Hedera Technology SAS
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Maintained by Dev Team of Hedera Technology <dev@hederatech.com>.
# Created 14 july 2010

=head1 NAME

kanopya-state-manager

=head1 SYNOPSIS

    $ ./kanopya-state-manager

=head1 DESCRIPTION


=head1 METHODS

=cut

use strict;
use warnings;

use Kanopya::Config;
use StateManager;

use Error qw(:try);

use Log::Log4perl "get_logger";

my $dir = Kanopya::Config::getKanopyaDir();
Log::Log4perl->init($dir.'/kanopya/conf/state-manager-log.conf');
my $log = get_logger("statemanager");


my $running = 1;

sub signalHandler {
    my $sig = shift;
    $log->info($sig." received : stopping main loop");
    $running = 0;
}

$SIG{TERM} = \&signalHandler;
#$SIG{SEGV} = \&segfaultHandler;

eval {
    my $statemanager = StateManager->new();

    $log->info("Starting main loop");
    # enter in the main loop and continue while $$running is true
    $statemanager->run(\$running);
};
if ($@) {
    $log->error("error in state-manager instanciation: $@");
    die "Catch error in StateManager instanciation: $@";
};

$log->info("kanopya-state-manager end.");


__END__

=head1 AUTHOR

Copyright (c) 2010 by Hedera Technology Dev Team (dev@hederatech.com). All rights reserved.
This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=cut
